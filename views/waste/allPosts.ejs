<%- include("../partials/header") %> <%- include("../partials/navbar") %>
<link
  href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
  rel="stylesheet"
/>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<style>
  .message {
    margin: 10px;
    padding: 10px;
    border-radius: 10px;
    max-width: 70%;
    word-wrap: break-word;
  }

  .sent {
    background-color: #007bff;
    color: white;
    margin-left: auto;
  }

  .received {
    background-color: #e9ecef;
    margin-right: auto;
  }

  #messageArea {
    display: flex;
    flex-direction: column;
  }

  .chat-btn {
    margin-top: 5px;
  }
</style>
<div class="container mb-5">
  <h2 class="text-center mb-4">All Waste Posts</h2>
  <div class="row">
    <% wastes.forEach(waste => { %>
    <div class="col-md-3 col-sm-6 mb-4">
      <div class="card shadow" style="max-width: 100%; font-size: 0.9rem">
        <img
          src="<%= waste.imageUrl %>"
          class="card-img-top"
          alt="Waste Image"
          style="height: 180px; object-fit: cover"
        />
        <div class="card-body p-2" style="height: 150px">
          <h6 class="card-title"><%= waste.name %></h6>
          <p class="card-text mb-1">Category: <%= waste.category %></p>
          <p class="card-text mb-1">Quantity: <%= waste.quantity %> kg</p>
          <p class="card-text mb-2">
            Location: <%= waste.city %>, Sector <%= waste.sector %>
          </p>

          <!-- Add this chat button -->
          <button
            class="btn btn-sm btn-info chat-btn"
            data-user-id="<%= waste.user._id %>"
            data-user-name="<%= waste.user.name %>"
          >
            Chat with Owner
          </button>

          <% if (waste.user.toString() === user._id.toString()) { %>
          <div class="btn-group" role="group">
            <button
              class="btn btn-sm btn-primary"
              onclick="editPost('<%= waste._id %>')"
            >
              Edit
            </button>
            &nbsp;&nbsp;&nbsp;
            <button
              class="btn btn-sm btn-danger"
              onclick="deletePost('<%= waste._id %>')"
            >
              Delete
            </button>
          </div>
          <% } %>
        </div>
      </div>
    </div>
    <% }); %>
  </div>
</div>

<!-- Chat Modal -->
<div class="modal fade" id="chatModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Chat with <span id="chatUserName"></span></h5>
        <button
          type="button"
          class="btn-close"
          data-bs-dismiss="modal"
        ></button>
      </div>
      <div class="modal-body">
        <div id="messageArea" style="height: 300px; overflow-y: auto"></div>
        <div class="input-group mt-3">
          <input
            type="text"
            id="messageInput"
            class="form-control"
            placeholder="Type your message..."
          />
          <button class="btn btn-primary" id="sendMessageBtn">Send</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();
  let currentChatUser = null;
  const chatModal = new bootstrap.Modal(document.getElementById("chatModal"));

  // Register current user with Socket.IO
  socket.on("connect", () => {
    console.log("Connected to Socket.IO");
    socket.emit("register", { userId: "<%= user._id %>" });
  });

  // Listen for incoming messages
  socket.on("private message", (message) => {
    console.log("Received message:", message);
    if (currentChatUser === message.sender) {
      appendMessage(message.content, "received");
    }
  });

  // Handle chat button clicks
  document.querySelectorAll(".chat-btn").forEach((button) => {
    button.addEventListener("click", () => {
      const userId = button.dataset.userId;
      const userName = button.dataset.userName;
      openChat(userId, userName);
    });
  });

  // Handle send message button
  document
    .getElementById("sendMessageBtn")
    .addEventListener("click", sendMessage);

  // Handle enter key in message input
  document.getElementById("messageInput").addEventListener("keypress", (e) => {
    if (e.key === "Enter") {
      sendMessage();
    }
  });

  function openChat(userId, userName) {
    console.log("Opening chat with:", userId, userName);
    currentChatUser = userId;
    document.getElementById("chatUserName").textContent = userName;
    document.getElementById("messageArea").innerHTML = "";

    // Load previous messages
    fetch(`/messages/${userId}`)
      .then((res) => res.json())
      .then((messages) => {
        console.log("Loaded messages:", messages);
        messages.forEach((msg) => {
          const type = msg.sender === "<%= user._id %>" ? "sent" : "received";
          appendMessage(msg.content, type);
        });
      })
      .catch((err) => console.error("Error loading messages:", err));

    chatModal.show();
  }

  function appendMessage(content, type) {
    const messageArea = document.getElementById("messageArea");
    const messageDiv = document.createElement("div");
    messageDiv.className = `message ${type}`;
    messageDiv.textContent = content;
    messageArea.appendChild(messageDiv);
    messageArea.scrollTop = messageArea.scrollHeight;
  }

  function sendMessage() {
    const input = document.getElementById("messageInput");
    const content = input.value.trim();

    if (!content) return;

    console.log("Sending message to:", currentChatUser);
    const messageData = {
      receiver: currentChatUser,
      content: content,
    };

    socket.emit("private message", messageData);
    appendMessage(content, "sent");

    // Save message to database
    fetch("/messages", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(messageData),
    })
      .then((res) => res.json())
      .then((data) => console.log("Message saved:", data))
      .catch((err) => console.error("Error saving message:", err));

    input.value = "";
  }
  function editPost(id) {
    window.location.href = `/waste/${id}/edit`;
  }

  async function deletePost(id) {
    if (!confirm("Are you sure you want to delete this post?")) return;

    try {
      const response = await fetch(`/waste/${id}`, {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
      });

      const data = await response.json();

      if (!response.ok) {
        alert(data.error || "Post Deleted !");
        return;
      }

      alert(data.message);
      location.reload();
    } catch (error) {
      alert("Post Deleted !");
    }
  }
</script>
<br />
<br />
<br />
<br />
<br />
<br />

<%- include("../partials/footer") %>
